#+OPTIONS: toc:nil author:nil
#+BEGIN_EXPORT html
---
layout: post
title: Perl Weekly Challenge 94.
excerpt: Group anagrams and binary tree to linked list.
tags:
   - pwc
   - perl
---
#+END_EXPORT
My solutions ([[https://github.com/wlmb/perlweeklychallenge-club/blob/master/challenge-094/wlmb/perl/ch-1.pl][task 1,]] [[https://github.com/wlmb/perlweeklychallenge-club/blob/master/challenge-094/wlmb/perl/ch-2.pl][task 2]] and an alternative solution to [[https://github.com/wlmb/perlweeklychallenge-club/blob/master/challenge-094/wlmb/perl/ch-2a.pl][task 2]]) to the [[https://perlweeklychallenge.org/blog/perl-weekly-challenge-094][The Weekly Challenge - 094]].
* Task 1: Group Anagrams
/Submitted by: Mohammad S Anwar/

/You are given an array of strings @S./

/Write a script to group Anagrams together in any random order./

/An Anagram is a word or phrase formed by rearranging the letters of a/
/different word or phrase, typically using all the original letters/
/exactly once./

Example 1:
#+begin_example

    Input: ("opt", "bat", "saw", "tab", "pot", "top", "was")
    Output: [ ("bat", "tab"),
              ("saw", "was"),
              ("top", "pot", "opt") ]
#+end_example
#+begin_example
Example 2:
    Input: ("x")
    Output: [ ("x") ]
#+end_example
This task has a very compact solution.
Two words are anagrams if and only if they are mapped to identical
canonical representations. We choose as the canonical representation
of the words a word made with the same letters ordered alphabetically.
I read the arguments from the command line, push them into arrays
indexed by the corresponding canonical strings and then print these
arrays one per line. For simplicity I disregarded the format:
quotation marks, commas and square brackets.
#+begin_src perl :tangle ch-1.pl :shebang #!/usr/bin/env perl
  # Perl weekly challenge 094
  # Task 1: Group anagrams.
  # From a list of strings recognize anagrams and group them.
  # See https:/wlmb.github.io/2020/01/04/PWC94/#task-1-group-anagrams
  use v5.12;
  my %anagrams;
  push @{$anagrams{join '', sort split '', $_}}, $_ foreach @ARGV;
  say join(" ", @{$anagrams{$_}})foreach keys %anagrams;
#+end_src

Example 1:
#+begin_src bash :results output verbatim
./ch-1.pl opt bat saw tab pot top was
#+end_src

Results:
: opt pot top
: saw was
: bat tab

Example 2:
#+begin_src bash :results output verbatim
./ch-1.pl x
#+end_src

Results:
: x

Actually, the code is short enough that it is appropriate for a one-liner.

Example 1':
#+begin_src bash :results output verbatim
perl -E 'push @{$anagrams{join "", sort split "", $_}}, $_ foreach @ARGV; say join(" ", @{$anagrams{$_}})foreach keys %anagrams;' opt bat saw tab pot top was
#+end_src

Results:
: saw was
: opt pot top
: bat tab

Example 2':
#+begin_src bash :results output verbatim
perl -E 'push @{$anagrams{join "", sort split "", $_}}, $_ foreach @ARGV; say join(" ", @{$anagrams{$_}})foreach keys %anagrams;' x
#+end_src

Results:
: x

* Task 2: Binary Tree to Linked List
/Submitted by: Mohammad S Anwar/

/You are given a binary tree./

/Write a script to represent the given binary tree as an object and/
/flatten it to a linked list object. Finally print the linked list/
/object./

Example:
#+begin_example
    Input:

        1
       / \
      2   3
     / \
    4   5
       / \
      6   7

    Output:

        1 -> 2 -> 4 -> 5 -> 6 -> 7 -> 3
#+end_example
If I omit the 'object' part of the task, it also has a very short
solution, using the fact that perl flattens lists automatically. Thus,
I may represent each node as a three element list, where the first
element is the value and the second and third are its left and right
descendants, empty for the leaves. Thus, the tree above would be represented as
~(1,(2,(4,(),()),(5,(6,(),()),(7,(),()))),(3,(),()))~. The program
would simply evaluate this expression in perl.

Example
#+begin_src bash :results output verbatim
perl -E 'say join "->", (1,(2,(4,(),()),(5,(6,(),()),(7,(),()))),(3,(),()))'
#+end_src

Results:
: 1->2->4->5->6->7->3

A not so nice and simple program doing the same and obtaining its arguments as a string
from the command line follows.

#+begin_src perl :tangle ch-2.pl :shebang #!/usr/bin/env perl
  # Perl weekly challenge 094
  # Task 2: Binary tree to linked list.
  #
  # See https:/wlmb.github.io/2020/01/04/PWC94/#task-1-binary-tree-to-linked-list
  use v5.12;
  use Text::Balanced qw(extract_bracketed extract_multiple);
#+end_src
I use Moose to define the tree object, together with a ~flatten~ method.
#+begin_src perl :tangle ch-2.pl
  package Tree;
  use Moose;
  has value=>(is=>'ro', required=>1);
  has left=>(is=>'ro', required=>1);
  has right=>(is=>'ro', required=>1);

  sub flatten {
      my $self=shift;
      return () unless defined $self->value;
      return ($self->value, $self->left?$self->left->flatten:(), $self->right?$self->right->flatten:());
  }
#+end_src
Back to the main package, the program builds the tree, flattens it and
prints it, as detailed in the task description. The arguments are taken from the
command line as parenthesized strings.
#+begin_src perl :tangle ch-2.pl
  package main;
  foreach(@ARGV){
      # remove unnecesary commas
      tr/,//d;
      my $tree=build_tree($_);
      say("Empty tree"), next unless defined $tree;
      my @values=$tree->flatten;
      say join '->', @values;
  }
#+end_src
The trees are built from string of the form '(value, left, right)',
parsed with Text::Balanced.
#+begin_src perl :tangle ch-2.pl
  sub build_tree { #Build tree recursively from string representation
      my $string=shift @_;
      # strip parenthesis
      die "Wrong format of string $string" unless $string=~s/^\s*\((.*)\)\s*$/$1/;
      return undef if $string=~/^\s*$/; # empty tree
      my @parts=extract_multiple($string,[\&extract_bracketed]);
      die "Not a binary tree ", join " ",@parts unless @parts==3;
      my($value, $left, $right)=@parts;
      die "Value can contain only alphanumerics: $value" unless $value=~s/^\s*(\w+)\s*$/$1/;
      return Tree->new(value=>$value, left=> build_tree($left), right=>build_tree($right));
  }
#+end_src
Somewhat more complicated than the oneliner above.
Anyway, I test the given example:
#+begin_src bash :results output verbatim
./ch-2.pl '(1,(2,(4,(),()),(5,(6,(),()),(7,(),()))),(3,(),()))'
#+end_src

Results:
: 1->2->4->5->6->7->3

Other examples (subtrees only on the right, only on the left, a
balanced binary tree, an empty tree):

#+begin_src bash :results output verbatim
./ch-2.pl '(1,(2,(3,(4,(),()),()),()),())'\
          '(1,(),(2,(),(3,(),(4,(),()))))'\
	  '(1,(2,(4,(),()),(5,(),())),(3,(6,(),()),(7,(),())))'\
	  '()'
#+end_src

Results:
: 1->2->3->4
: 1->2->3->4
: 1->2->4->5->3->6->7
: Empty tree

The inputs as parenthesized lists don't look terribly nice and it is
easy to make errors. I guess they would look better if the input tree
is coded as a yaml file. To that end, I rewrite the program above using
the ~YAML::Tiny~ package to process the inputs.

#+begin_src perl :tangle ch-2a.pl :shebang #!/usr/bin/env perl
  # Perl weekly challenge 094
  # Task 2: Binary tree to linked list.
  #
  # See https:/wlmb.github.io/2020/01/04/PWC94/#task-1-binary-tree-to-linked-list
  use v5.12;

  package Tree;
  use Moose;
  has value=>(is=>'ro', required=>1);
  has left=>(is=>'ro', required=>1);
  has right=>(is=>'ro', required=>1);

  sub flatten {
      my $self=shift;
      return () unless defined $self->value;
      return ($self->value,
	      $self->left?$self->left->flatten:(),
	      $self->right?$self->right->flatten:());
  }
#+end_src
The program receives paths to yaml files in ~@ARGV~, opens them and
processes all its trees, one to each /document/.
#+begin_src  perl :tangle ch-2a.pl
  package main;
  use Data::Dumper;
  use YAML::Tiny;
  # @ARGV contains yaml filenames
  foreach(@ARGV){ # for each yaml file
      my $yaml=YAML::Tiny->read($_); # convert yaml document to perl structure
      foreach(@{$yaml}){ #for each document in the file
	  my $tree=build_tree($_);
	  say("Empty tree"), next unless defined $tree;
	  my @values=$tree->flatten;
	  say join '->', @values;
      }
  }
#+end_src
The trees are built from yaml objects: scalars for leaves,
value:array pairs to represent a node with an array of of two
subtrees, null is for for empty subtrees.
#+begin_src perl :tangle ch-2a.pl
  sub build_tree { #Build tree recursively
      my $tree=shift;
      return undef unless defined $tree; #Empty tree
      return Tree->new(value=>$tree, left=>undef, right=>undef) unless ref $tree; # a leaf
      # Die with an unsophisticated dump of the current subtree in case of errors
      die "Not a binary tree\n". Dumper($tree) unless ref $tree eq "HASH";
      my @keys=keys %{$tree};
      die "Not a binary tree\n". Dumper($tree) unless @keys==1;
      my $node=$keys[0];
      my $subtrees=$tree->{$node};
      die "Not a binary tree\n". Dumper($tree) unless ref $subtrees eq "ARRAY" and @$subtrees==2;
      my ($left,$right)=@$subtrees;
      return Tree->new(value=>$node, left=> build_tree($left), right=>build_tree($right));
  }
#+end_src

For testing purposes, I make a yaml file and run the program on
all the examples above.
#+begin_src bash :results output verbatim
cat <<EOF >rem.yml
---
# original example
1:
 - 2:
   - 4
   - 5:
     - 6
     - 7
 - 3
---
# only left descendants
1:
  - 2:
     - 3:
        - 4
        - ~
     - ~
  - ~
---
# only right descendants
1:
 - ~
 - 2:
    - ~
    - 3:
       - ~
       - 4
---
# balanced tree
1:
 - 2:
    - 4
    - 5
 - 3:
    - 6
    - 7
---
# empty
EOF
./ch-2a.pl rem.yml
#+end_src

Results:
: 1->2->4->5->6->7->3
: 1->2->3->4
: 1->2->3->4
: 1->2->4->5->3->6->7
: Empty tree
